{
  "version": 3,
  "sources": ["../../vue-drawing-canvas/node_modules/vue-demi/lib/index.mjs", "../../vue-drawing-canvas/dist/vue-drawing-canvas.esm.js"],
  "sourcesContent": ["import * as Vue from 'vue'\n\nvar isVue2 = false\nvar isVue3 = true\nvar Vue2 = undefined\n\nfunction install() {}\n\nexport function set(target, key, val) {\n  if (Array.isArray(target)) {\n    target.length = Math.max(target.length, key)\n    target.splice(key, 1, val)\n    return val\n  }\n  target[key] = val\n  return val\n}\n\nexport function del(target, key) {\n  if (Array.isArray(target)) {\n    target.splice(key, 1)\n    return\n  }\n  delete target[key]\n}\n\nexport * from 'vue'\nexport {\n  Vue,\n  Vue2,\n  isVue2,\n  isVue3,\n  install,\n}\n", "import { defineComponent, isVue2, h } from 'vue-demi';\n\n/* eslint-disable no-debugger, no-console */\nvar VueDrawingCanvas = /*#__PURE__*/defineComponent({\n  name: 'VueDrawingCanvas',\n  props: {\n    strokeType: {\n      type: String,\n      validator: value => {\n        return ['dash', 'line', 'square', 'circle', 'triangle', 'half_triangle'].indexOf(value) !== -1;\n      },\n      default: () => 'dash'\n    },\n    fillShape: {\n      type: Boolean,\n      default: () => false\n    },\n    width: {\n      type: [String, Number],\n      default: () => 600\n    },\n    height: {\n      type: [String, Number],\n      default: () => 400\n    },\n    image: {\n      type: String,\n      default: () => ''\n    },\n    eraser: {\n      type: Boolean,\n      default: () => false\n    },\n    color: {\n      type: String,\n      default: () => '#000000'\n    },\n    lineWidth: {\n      type: Number,\n      default: () => 5\n    },\n    lineCap: {\n      type: String,\n      validator: value => {\n        return ['round', 'square', 'butt'].indexOf(value) !== -1;\n      },\n      default: () => 'round'\n    },\n    lineJoin: {\n      type: String,\n      validator: value => {\n        return ['miter', 'round', 'bevel'].indexOf(value) !== -1;\n      },\n      default: () => 'miter'\n    },\n    lock: {\n      type: Boolean,\n      default: () => false\n    },\n    styles: {\n      type: [Array, String, Object]\n    },\n    classes: {\n      type: [Array, String, Object]\n    },\n    backgroundColor: {\n      type: String,\n      default: () => '#FFFFFF'\n    },\n    backgroundImage: {\n      type: String,\n      default: () => null\n    },\n    watermark: {\n      type: Object,\n      default: () => null\n    },\n    saveAs: {\n      type: String,\n      validator: value => {\n        return ['jpeg', 'png'].indexOf(value) !== -1;\n      },\n      default: () => 'png'\n    },\n    canvasId: {\n      type: String,\n      default: () => 'VueDrawingCanvas'\n    },\n    initialImage: {\n      type: Array,\n      default: () => []\n    },\n    additionalImages: {\n      type: Array,\n      default: () => []\n    },\n    outputWidth: {\n      type: Number\n    },\n    outputHeight: {\n      type: Number\n    }\n  },\n\n  data() {\n    return {\n      loadedImage: null,\n      drawing: false,\n      context: null,\n      images: [],\n      strokes: {\n        type: '',\n        from: {\n          x: 0,\n          y: 0\n        },\n        coordinates: [],\n        color: '',\n        width: '',\n        fill: false,\n        lineCap: '',\n        lineJoin: ''\n      },\n      guides: [],\n      trash: []\n    };\n  },\n\n  mounted() {\n    this.setContext();\n    this.$nextTick(() => {\n      this.drawInitialImage();\n      this.drawAdditionalImages();\n    });\n  },\n\n  watch: {\n    backgroundImage: function () {\n      this.loadedImage = null;\n    }\n  },\n  methods: {\n    async setContext() {\n      let canvas = document.querySelector('#' + this.canvasId);\n      this.context = this.context ? this.context : canvas.getContext('2d');\n      await this.setBackground();\n    },\n\n    drawInitialImage() {\n      if (this.initialImage && this.initialImage.length > 0) {\n        // @ts-ignore\n        this.images = [].concat(this.images, this.initialImage);\n        this.redraw(true);\n      }\n    },\n\n    drawAdditionalImages() {\n      if (this.additionalImages && this.additionalImages.length > 0) {\n        let canvas = document.querySelector('#' + this.canvasId);\n        this.additionalImages.forEach(watermarkObject => {\n          this.drawWatermark(canvas, this.context, watermarkObject);\n        });\n      }\n    },\n\n    clear() {\n      this.context.clearRect(0, 0, Number(this.width), Number(this.height));\n    },\n\n    async setBackground() {\n      this.clear();\n      this.context.fillStyle = this.backgroundColor;\n      this.context.fillRect(0, 0, Number(this.width), Number(this.height));\n      await this.$nextTick(async () => {\n        await this.drawBackgroundImage();\n      });\n      this.save();\n    },\n\n    async drawBackgroundImage() {\n      if (!this.loadedImage) {\n        return new Promise(resolve => {\n          if (!this.backgroundImage) {\n            resolve();\n            return;\n          }\n\n          const image = new Image();\n          image.src = this.backgroundImage;\n\n          image.onload = () => {\n            this.context.drawImage(image, 0, 0, Number(this.width), Number(this.height));\n            this.loadedImage = image;\n            resolve();\n          };\n        });\n      } else {\n        this.context.drawImage(this.loadedImage, 0, 0, Number(this.width), Number(this.height));\n      }\n    },\n\n    getCoordinates(event) {\n      let x, y;\n\n      if (event.touches && event.touches.length > 0) {\n        let canvas = document.querySelector('#' + this.canvasId);\n        let rect = canvas.getBoundingClientRect();\n        x = event.touches[0].clientX - rect.left;\n        y = event.touches[0].clientY - rect.top;\n      } else {\n        x = event.offsetX;\n        y = event.offsetY;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    },\n\n    startDraw(event) {\n      if (!this.lock) {\n        this.drawing = true;\n        let coordinate = this.getCoordinates(event);\n        this.strokes = {\n          type: this.eraser ? 'eraser' : this.strokeType,\n          from: coordinate,\n          coordinates: [],\n          color: this.eraser ? this.backgroundColor : this.color,\n          width: this.lineWidth,\n          fill: this.eraser || this.strokeType === 'dash' || this.strokeType === 'line' ? false : this.fillShape,\n          lineCap: this.lineCap,\n          lineJoin: this.lineJoin\n        };\n        this.guides = [];\n      }\n    },\n\n    draw(event) {\n      if (this.drawing) {\n        if (!this.context) {\n          this.setContext();\n        }\n\n        let coordinate = this.getCoordinates(event);\n\n        if (this.eraser || this.strokeType === 'dash') {\n          this.strokes.coordinates.push(coordinate);\n          this.drawShape(this.context, this.strokes, false);\n        } else {\n          switch (this.strokeType) {\n            case 'line':\n              this.guides = [{\n                x: coordinate.x,\n                y: coordinate.y\n              }];\n              break;\n\n            case 'square':\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: coordinate.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n\n            case 'triangle':\n              let center = Math.floor((coordinate.x - this.strokes.from.x) / 2) < 0 ? Math.floor((coordinate.x - this.strokes.from.x) / 2) * -1 : Math.floor((coordinate.x - this.strokes.from.x) / 2);\n              let width = this.strokes.from.x < coordinate.x ? this.strokes.from.x + center : this.strokes.from.x - center;\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: width,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n\n            case 'half_triangle':\n              this.guides = [{\n                x: coordinate.x,\n                y: this.strokes.from.y\n              }, {\n                x: this.strokes.from.x,\n                y: coordinate.y\n              }, {\n                x: this.strokes.from.x,\n                y: this.strokes.from.y\n              }];\n              break;\n\n            case 'circle':\n              let radiusX = this.strokes.from.x - coordinate.x < 0 ? (this.strokes.from.x - coordinate.x) * -1 : this.strokes.from.x - coordinate.x;\n              this.guides = [{\n                x: this.strokes.from.x > coordinate.x ? this.strokes.from.x - radiusX : this.strokes.from.x + radiusX,\n                y: this.strokes.from.y\n              }, {\n                x: radiusX,\n                y: radiusX\n              }];\n              break;\n          }\n\n          this.drawGuide(true);\n        }\n      }\n    },\n\n    drawGuide(closingPath) {\n      this.redraw(true);\n      this.$nextTick(() => {\n        this.context.strokeStyle = this.color;\n        this.context.lineWidth = 1;\n        this.context.lineJoin = this.lineJoin;\n        this.context.lineCap = this.lineCap;\n        this.context.beginPath();\n        this.context.setLineDash([15, 15]);\n\n        if (this.strokes.type === 'circle') {\n          this.context.ellipse(this.guides[0].x, this.guides[0].y, this.guides[1].x, this.guides[1].y, 0, 0, Math.PI * 2);\n        } else {\n          this.context.moveTo(this.strokes.from.x, this.strokes.from.y);\n          this.guides.forEach(coordinate => {\n            this.context.lineTo(coordinate.x, coordinate.y);\n          });\n\n          if (closingPath) {\n            this.context.closePath();\n          }\n        }\n\n        this.context.stroke();\n      });\n    },\n\n    drawShape(context, strokes, closingPath) {\n      context.strokeStyle = strokes.color;\n      context.fillStyle = strokes.color;\n      context.lineWidth = strokes.width;\n      context.lineJoin = strokes.lineJoin === undefined ? this.lineJoin : strokes.lineJoin;\n      context.lineCap = strokes.lineCap === undefined ? this.lineCap : strokes.lineCap;\n      context.beginPath();\n      context.setLineDash([]);\n\n      if (strokes.type === 'circle') {\n        context.ellipse(strokes.coordinates[0].x, strokes.coordinates[0].y, strokes.coordinates[1].x, strokes.coordinates[1].y, 0, 0, Math.PI * 2);\n      } else {\n        context.moveTo(strokes.from.x, strokes.from.y);\n        strokes.coordinates.forEach(stroke => {\n          context.lineTo(stroke.x, stroke.y);\n        });\n\n        if (closingPath) {\n          context.closePath();\n        }\n      }\n\n      if (strokes.fill) {\n        context.fill();\n      } else {\n        context.stroke();\n      }\n    },\n\n    stopDraw() {\n      if (this.drawing) {\n        this.strokes.coordinates = this.guides.length > 0 ? this.guides : this.strokes.coordinates;\n        this.images.push(this.strokes);\n        this.redraw(true);\n        this.drawing = false;\n        this.trash = [];\n      }\n    },\n\n    reset() {\n      if (!this.lock) {\n        this.images = [];\n        this.strokes = {\n          type: '',\n          coordinates: [],\n          color: '',\n          width: '',\n          fill: false,\n          lineCap: '',\n          lineJoin: ''\n        };\n        this.guides = [];\n        this.trash = [];\n        this.redraw(true);\n      }\n    },\n\n    undo() {\n      if (!this.lock) {\n        let strokes = this.images.pop();\n\n        if (strokes) {\n          this.trash.push(strokes);\n          this.redraw(true);\n        }\n      }\n    },\n\n    redo() {\n      if (!this.lock) {\n        let strokes = this.trash.pop();\n\n        if (strokes) {\n          this.images.push(strokes);\n          this.redraw(true);\n        }\n      }\n    },\n\n    async redraw(output) {\n      output = typeof output !== 'undefined' ? output : true;\n      await this.setBackground().then(() => {\n        this.drawAdditionalImages();\n      }).then(() => {\n        let baseCanvas = document.createElement('canvas');\n        let baseCanvasContext = baseCanvas.getContext('2d');\n        baseCanvas.width = Number(this.width);\n        baseCanvas.height = Number(this.height);\n\n        if (baseCanvasContext) {\n          this.images.forEach(stroke => {\n            if (baseCanvasContext) {\n              baseCanvasContext.globalCompositeOperation = stroke.type === 'eraser' ? 'destination-out' : 'source-over';\n\n              if (stroke.type !== 'circle' || stroke.type === 'circle' && stroke.coordinates.length > 0) {\n                this.drawShape(baseCanvasContext, stroke, stroke.type === 'eraser' || stroke.type === 'dash' || stroke.type === 'line' ? false : true);\n              }\n            }\n          });\n          this.context.drawImage(baseCanvas, 0, 0, Number(this.width), Number(this.height));\n        }\n      }).then(() => {\n        if (output) {\n          this.save();\n        }\n      });\n    },\n\n    wrapText(context, text, x, y, maxWidth, lineHeight) {\n      const newLineRegex = /(\\r\\n|\\n\\r|\\n|\\r)+/g;\n      const whitespaceRegex = /\\s+/g;\n      var lines = text.split(newLineRegex).filter(word => word.length > 0);\n\n      for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n        var words = lines[lineNumber].split(whitespaceRegex).filter(word => word.length > 0);\n        var line = '';\n\n        for (var n = 0; n < words.length; n++) {\n          var testLine = line + words[n] + ' ';\n          var metrics = context.measureText(testLine);\n          var testWidth = metrics.width;\n\n          if (testWidth > maxWidth && n > 0) {\n            if (this.watermark && this.watermark.fontStyle && this.watermark.fontStyle.drawType && this.watermark.fontStyle.drawType === 'stroke') {\n              context.strokeText(line, x, y);\n            } else {\n              context.fillText(line, x, y);\n            }\n\n            line = words[n] + ' ';\n            y += lineHeight;\n          } else {\n            line = testLine;\n          }\n        }\n\n        if (this.watermark && this.watermark.fontStyle && this.watermark.fontStyle.drawType && this.watermark.fontStyle.drawType === 'stroke') {\n          context.strokeText(line, x, y);\n        } else {\n          context.fillText(line, x, y);\n        }\n\n        y += words.length > 0 ? lineHeight : 0;\n      }\n    },\n\n    save() {\n      let canvas = document.querySelector('#' + this.canvasId);\n\n      if (this.watermark) {\n        let temp = document.createElement('canvas');\n        let ctx = temp.getContext('2d');\n\n        if (ctx) {\n          temp.width = Number(this.width);\n          temp.height = Number(this.height);\n          ctx.drawImage(canvas, 0, 0, Number(this.width), Number(this.height));\n          this.drawWatermark(temp, ctx, this.watermark);\n        }\n      } else {\n        let temp = document.createElement('canvas');\n        let tempCtx = temp.getContext('2d');\n        let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n        let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n        temp.width = Number(tempWidth);\n        temp.height = Number(tempHeight);\n\n        if (tempCtx) {\n          tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n          this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n          return temp.toDataURL('image/' + this.saveAs, 1);\n        }\n      }\n    },\n\n    drawWatermark(canvas, ctx, watermark) {\n      if (watermark.type === 'Image') {\n        let imageWidth = watermark.imageStyle ? watermark.imageStyle.width ? watermark.imageStyle.width : Number(this.width) : Number(this.width);\n        let imageHeight = watermark.imageStyle ? watermark.imageStyle.height ? watermark.imageStyle.height : Number(this.height) : Number(this.height);\n        const image = new Image();\n        image.src = watermark.source;\n\n        image.onload = () => {\n          if (watermark && ctx) {\n            ctx.drawImage(image, watermark.x, watermark.y, Number(imageWidth), Number(imageHeight));\n          }\n\n          let temp = document.createElement('canvas');\n          let tempCtx = temp.getContext('2d');\n          let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n          let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n          temp.width = Number(tempWidth);\n          temp.height = Number(tempHeight);\n\n          if (tempCtx) {\n            tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n            this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n            return temp.toDataURL('image/' + this.saveAs, 1);\n          }\n        };\n      } else if (watermark.type === 'Text') {\n        let font = watermark.fontStyle ? watermark.fontStyle.font ? watermark.fontStyle.font : '20px serif' : '20px serif';\n        let align = watermark.fontStyle ? watermark.fontStyle.textAlign ? watermark.fontStyle.textAlign : 'start' : 'start';\n        let baseline = watermark.fontStyle ? watermark.fontStyle.textBaseline ? watermark.fontStyle.textBaseline : 'alphabetic' : 'alphabetic';\n        let color = watermark.fontStyle ? watermark.fontStyle.color ? watermark.fontStyle.color : '#000000' : '#000000';\n        ctx.font = font;\n        ctx.textAlign = align;\n        ctx.textBaseline = baseline;\n\n        if (watermark.fontStyle && watermark.fontStyle.rotate) {\n          let centerX, centerY;\n\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            centerX = watermark.x + Math.floor(watermark.fontStyle.width / 2);\n          } else {\n            centerX = watermark.x;\n          }\n\n          if (watermark.fontStyle && watermark.fontStyle.lineHeight) {\n            centerY = watermark.y + Math.floor(watermark.fontStyle.lineHeight / 2);\n          } else {\n            centerY = watermark.y;\n          }\n\n          ctx.translate(centerX, centerY);\n          ctx.rotate(watermark.fontStyle.rotate * Math.PI / 180);\n          ctx.translate(centerX * -1, centerY * -1);\n        }\n\n        if (watermark.fontStyle && watermark.fontStyle.drawType && watermark.fontStyle.drawType === 'stroke') {\n          ctx.strokeStyle = watermark.fontStyle.color;\n\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            this.wrapText(ctx, watermark.source, watermark.x, watermark.y, watermark.fontStyle.width, watermark.fontStyle.lineHeight);\n          } else {\n            ctx.strokeText(watermark.source, watermark.x, watermark.y);\n          }\n        } else {\n          ctx.fillStyle = color;\n\n          if (watermark.fontStyle && watermark.fontStyle.width) {\n            this.wrapText(ctx, watermark.source, watermark.x, watermark.y, watermark.fontStyle.width, watermark.fontStyle.lineHeight);\n          } else {\n            ctx.fillText(watermark.source, watermark.x, watermark.y);\n          }\n        }\n\n        let temp = document.createElement('canvas');\n        let tempCtx = temp.getContext('2d');\n        let tempWidth = this.outputWidth === undefined ? this.width : this.outputWidth;\n        let tempHeight = this.outputHeight === undefined ? this.height : this.outputHeight;\n        temp.width = Number(tempWidth);\n        temp.height = Number(tempHeight);\n\n        if (tempCtx) {\n          tempCtx.drawImage(canvas, 0, 0, Number(tempWidth), Number(tempHeight));\n          this.$emit('update:image', temp.toDataURL('image/' + this.saveAs, 1));\n          return temp.toDataURL('image/' + this.saveAs, 1);\n        }\n      }\n    },\n\n    isEmpty() {\n      return this.images.length > 0 ? false : true;\n    },\n\n    getAllStrokes() {\n      return this.images;\n    }\n\n  },\n\n  render() {\n    if (isVue2) {\n      return h('canvas', {\n        attrs: {\n          id: this.canvasId,\n          width: Number(this.width),\n          height: Number(this.height)\n        },\n        style: {\n          'touchAction': 'none',\n          // @ts-ignore\n          ...this.styles\n        },\n        class: this.classes,\n        on: {\n          mousedown: event => this.startDraw(event),\n          mousemove: event => this.draw(event),\n          mouseup: () => this.stopDraw(),\n          mouseleave: () => this.stopDraw(),\n          touchstart: event => this.startDraw(event),\n          touchmove: event => this.draw(event),\n          touchend: () => this.stopDraw(),\n          touchleave: () => this.stopDraw(),\n          touchcancel: () => this.stopDraw(),\n          pointerdown: event => this.startDraw(event),\n          pointermove: event => this.draw(event),\n          pointerup: () => this.stopDraw(),\n          pointerleave: () => this.stopDraw(),\n          pointercancel: () => this.stopDraw()\n        },\n        ...this.$props\n      });\n    }\n\n    return h('canvas', {\n      id: this.canvasId,\n      height: Number(this.height),\n      width: Number(this.width),\n      style: {\n        'touchAction': 'none',\n        // @ts-ignore\n        ...this.styles\n      },\n      class: this.classes,\n      onMousedown: $event => this.startDraw($event),\n      onMousemove: $event => this.draw($event),\n      onMouseup: () => this.stopDraw(),\n      onMouseleave: () => this.stopDraw(),\n      onTouchstart: $event => this.startDraw($event),\n      onTouchmove: $event => this.draw($event),\n      onTouchend: () => this.stopDraw(),\n      onTouchleave: () => this.stopDraw(),\n      onTouchcancel: () => this.stopDraw(),\n      onPointerdown: $event => this.startDraw($event),\n      onPointermove: $event => this.draw($event),\n      onPointerup: () => this.stopDraw(),\n      onPointerleave: () => this.stopDraw(),\n      onPointercancel: () => this.stopDraw()\n    });\n  }\n\n});\n\nexport { VueDrawingCanvas as default };\n"],
  "mappings": "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",
  "names": []
}
